// Created By: Abolfazl Borhani (WHI3PER)

// Email: abolfazlborhani80@gmail.com
// Github: https://www.github.com/AbolfazlBorhani
// Linkdin: https://www.linkedin.com/in/abolfazl-borhani-a79541321/
// Telegram Channel: @THE_WHI3PER_WORLD

#include <windows.h>
#include <iostream>
#include <conio.h>

namespace Labyrinth {
    HANDLE hConsole{ GetStdHandle(STD_OUTPUT_HANDLE) };

    void level1();
    void level2();
    void settings();
    void aboutMe();
    void menu();
    void colors();
    void runProgram();

    /* ======================================================================================================================================= */

    void level1() {
        HWND console{ GetConsoleWindow() };
        RECT rect;
        GetWindowRect(console, &rect);
        MoveWindow(console, rect.left, rect.top, 900, 570, TRUE);

        std::system("cls");

        const int rows{ 31 };
        const int cols{ 33 };
        std::string map[rows][cols] {
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," "},
            {" ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," "},
            {" ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," "},
            {" ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "," "," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█","█","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█","Ω","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," "," "," ","█"," ","█"," ","█"," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█"," ","█"," ","█","█","█","█","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," "," "," "," "," "," "," ","█"," "," "," "," "," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," ","█"," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█","█","█","█","█","█","█","█","█"," ","█"," ","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," "},
            {" ","█"," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," "},
            {" ","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
        };

        int playerRow{ 0 };
        int playerCol{ 0 };
        bool gameOver{ false };

        for (;!gameOver;) {
            std::string buffer{};

            for (std::size_t i{ 0 }; i < rows; i -=- 1) {
                buffer += "\t\t\t\t\t";
                for (std::size_t j{ 0 }; j < cols; j -= -1)
                    buffer += (i == playerRow && j == playerCol ? "*" : map[i][j]);

                buffer += '\n';
            }

            std::cout << buffer;

            char key = _getch();

            switch (key) {
            case 'w': case 'W': case 72:
                if (playerRow != 0 && map[playerRow - 1][playerCol] != "█")
                    playerRow--;
                break;

            case 's': case 'S': case 80:
                if (playerRow < rows - 1 && map[playerRow + 1][playerCol] != "█")
                    playerRow++;
                break;

            case 'a': case 'A': case 75:
                if (playerCol > 0 && map[playerRow][playerCol - 1] != "█")
                    playerCol--;
                break;

            case 'd': case 'D': case 77:
                if (playerCol < cols - 1 && map[playerRow][playerCol + 1] != "█")
                    playerCol++;
                break;
            }

//            if (M1[playerRow][playerCol] == "2") {
//                gameOver = true;
//                std::cout << "Game Over!\n";
//                std::system("pause");
//            }

            if (playerRow == 21 && playerCol == 19) level2();
        }
    }

    /* ======================================================================================================================================= */

    void level2() {
        std::system("cls");

        HWND console{ GetConsoleWindow() };
        RECT rect;
        GetWindowRect(console, &rect);
        MoveWindow(console, rect.left, rect.top, 900, 760, TRUE);

        const int rows{ 39 };
        const int cols{ 41 };
        std::string map[rows][cols]{
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," "},
            {" ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," "},
            {" ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," "},
            {" ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█","█","█","█","█"," ","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," "," ","█"," "," "," "," "," ","█"," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█"," ","█","█","█"," ","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," "," ","█"," "," "," ","█"," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█"," ","█","█","█"," ","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," "," ","█"," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█"," ","█"," ","█","█","█","█","█","█","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "," "," "," "," "," "," "," ","█"," ","█"," "," "," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█","█"," ","█"," ","█"," ","█","█","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "," "," "," ","█"," ","█"," ","█"," "," "," ","█"," ","█"," "," "," "," "," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█","█","█","█"," ","█","█","█","█","█"," ","█"," ","█","█","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," "," "," ","█"," ","█"," "," "," "," "," "," "," "," ","█"," ","█"," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█"," ","█"," ","█","█","█","█","█","█"," ","█"," ","█","█","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," "," "," ","█"," ","█"," "," "," "," "," "," "," ","█"," ","█"," "," "," "," ","█"," "," "," "," "," ","█"," ","█"," ","█"," ","█"," "," "," ","█"," "},
            {" ","█","█","█","█","█"," ","█","█","█","█","█","█","█"," ","█"," ","█","Ω","█","█"," ","█"," ","█","█","█","█","█"," ","█"," ","█"," ","█","█","█","█","█"," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," "," ","█"," ","█"," ","█"," "," "," "," "," ","█"," ","█"," "," "," "," "," "," "," "},
            {" ","█","█","█","█","█"," ","█","█","█","█","█","█","█"," ","█"," ","█","█","█","█"," ","█"," ","█"," ","█","█","█","█","█"," ","█"," ","█","█","█","█","█"," "},
            {" ","█"," "," "," ","█"," ","█"," "," "," "," "," ","█"," "," "," "," "," "," "," "," "," "," ","█"," ","█"," "," "," "," "," ","█"," ","█"," "," "," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█","█","█"," ","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█","█","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "," "," "," "," "," "," ","█"," "," "," "," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█"," ","█"," ","█","█","█","█","█","█"," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "," "," "," "," "," "," ","█"," ","█"," "," "," "," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█","█"," ","█"," ","█","█","█","█","█","█"," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," "," "," "," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█","█","█","█","█","█"," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," ","█"," "," "," ","█"," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," ","█"," "},
            {" ","█"," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█"," "},
            {" ","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█"," "},
            {" ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," "},
            {" ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," ","█","█","█","█","█","█","█","█","█","█"," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
        };

        int playerRow{ 0 };
        int playerCol{ 0 };
        bool gameOver{ false };

        for (;!gameOver;) {
            std::string buffer{};

            for (std::size_t i{ 0 }; i < rows; i -=- 1) {
                buffer += "\t\t\t\t\t";
                for (std::size_t j{ 0 }; j < cols; j -= -1)
                    buffer += (i == playerRow && j == playerCol ? "*" : map[i][j]);

                buffer += '\n';
            }

            std::cout << buffer;

            char key = _getch();

            switch (key) {
            case 'w': case 'W': case 72:
                if (playerRow != 0 && map[playerRow - 1][playerCol] != "█")
                    playerRow--;
                break;

            case 's': case 'S': case 80:
                if (playerRow < rows - 1 && map[playerRow + 1][playerCol] != "█")
                    playerRow++;
                break;

            case 'a': case 'A': case 75:
                if (playerCol > 0 && map[playerRow][playerCol - 1] != "█")
                    playerCol--;
                break;

            case 'd': case 'D': case 77:
                if (playerCol < cols - 1 && map[playerRow][playerCol + 1] != "█")
                    playerCol++;
                break;
            }

            // if (playerRow == 19 && playerCol == 18) Level3();
        }
    }

    /* ======================================================================================================================================= */

    void aboutMe() {
        std::system("cls");
        std::string str{ "" };

        str.append("Created By: Abolfazl Borhani (WHI3PER)\n\n\t\t\t\t\t");
        str.append("Email: abolfazlborhani80@gmail.com\n\n\t\t\t\t\t");
        str.append("Github: https://www.github.com/AbolfazlBorhani\n\n\t\t\t\t\t");
        str.append("Linkdin: https://www.linkedin.com/in/abolfazl-borhani-a79541321/\n\n\t\t\t\t\t");
        str.append("Telegram Channel: @THE_WHI3PER_WORLD");

        std::cout << "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t";
        for(char &c : str) {
            Sleep(100);
            std::cout << c;
        }

        std::cout << "\t\t\t\t\t\t";
        std::system("pause>0");
        std::system("cls");
    }

    /* ======================================================================================================================================= */

    void colors() {
        std::system("cls");

        std::string colors[6][9] {
            {" "," ","R","e","d"," "," "," "," "},
            {" "," ","B","l","u","e"," "," "," "},
            {" "," ","G","r","e","e","n"," "," "},
            {" "," ","W","h","i","t","e"," "," "},
            {" "," ","Y","e","l","l","o","w"," "},
            {" "," ","B","a","c","k"," "," "," "},
        };

        int playerRow{ 0 };
        int playerCol{ 0 };

        for (;;) {
            std::cout << "\n\n\n\n\n\n\n\n\n\n";
            for (std::size_t i{ 0 }; i < 6; i -=- 1) {
                std::cout << "\t\t\t\t\t\t";
                for (std::size_t j{ 0 }; j < 9; j -= -1) {
                    if (i == playerRow && j == playerCol)
                        std::cout << "►";
                    else
                        std::cout << colors[i][j];
                }
                std::cout << '\n';
            }

            char key = _getch();

            switch (key) {
            case 72:
                if (playerRow != 0 && colors[playerRow - 1][playerCol] == " ")
                    playerRow--;
                break;

            case 80:
                if (playerRow < 5 && colors[playerRow + 1][playerCol] == " ")
                    playerRow++;
                break;

            case ' ':
                if (playerRow == 0 and playerCol == 0) SetConsoleTextAttribute(hConsole, 12);
                if (playerRow == 1 and playerCol == 0) SetConsoleTextAttribute(hConsole, 9);
                if (playerRow == 2 and playerCol == 0) SetConsoleTextAttribute(hConsole, 10);
                if (playerRow == 3 and playerCol == 0) SetConsoleTextAttribute(hConsole, 15);
                if (playerRow == 4 and playerCol == 0) SetConsoleTextAttribute(hConsole, 14);
                if (playerRow == 5 and playerCol == 0) settings();
            }
            std::system("cls");
        }
    }

    /* ======================================================================================================================================= */

    void settings() {
        std::system("cls");

        std::string settings[3][11] {
            {" "," ","G","r","a","p","h","i","c","s"," "},
            {" "," ","C","o","l","o","r","s"," "," "," "},
            {" "," ","B","a","c","k"," "," "," "," "," "},
        };

        int playerRow{ 0 };
        int playerCol{ 0 };

        for (;;) {
            std::cout << "\n\n\n\n\n\n\n\n\n\n";
            for (std::size_t i{ 0 }; i < 3; i -=- 1) {
                std::cout << "\t\t\t\t\t\t";
                for (std::size_t j{ 0 }; j < 11; j -= -1) {
                    if (i == playerRow && j == playerCol)
                        std::cout << "►";
                    else
                        std::cout << settings[i][j];
                }
                std::cout << '\n';
            }

            char key = _getch();

            switch (key) {
            case 72:
                if (playerRow != 0 && settings[playerRow - 1][playerCol] == " ")
                    playerRow--;
                break;

            case 80:
                if (playerRow < 2 && settings[playerRow + 1][playerCol] == " ")
                    playerRow++;
                break;

            case ' ':
                if (playerRow == 0 and playerCol == 0) {
                    std::system("cls");
                    std::cout << "\n\n\n\n\n\n\n\n\n\n\t\t\t\t";
                    std::string str{ "Really !!! Did you think this program has graphic settings ?!\n" };

                    for (char &c : str) {
                        Sleep(100);
                        std::cout << c;
                    }

                    std::system("pause>0");
                }

                if (playerRow == 1 and playerCol == 0) colors();
                if (playerRow == 2 and playerCol == 0) menu();

                break;

            }
            std::system("cls");
        }
    }

    /* ======================================================================================================================================= */

    void menu() {
        HANDLE hConsole{ GetStdHandle(STD_OUTPUT_HANDLE) };
        CONSOLE_FONT_INFOEX fontInfo;
        fontInfo.cbSize = sizeof(CONSOLE_FONT_INFOEX);
        GetCurrentConsoleFontEx(hConsole, FALSE, &fontInfo);
        fontInfo.dwFontSize.X = 12;
        fontInfo.dwFontSize.Y = 16;
        SetCurrentConsoleFontEx(hConsole, FALSE, &fontInfo);

        std::system("cls");

        std::string menu[4][13] {
            {" "," ","S","t","a","r","t"," ","G","a","m","e"," "},
            {" "," ","S","e","t","t","i","n","g","s"," "," "," "},
            {" "," ","A","b","o","u","t"," ","M","e"," "," "," "},
            {" "," ","E","x","i","t"," "," "," "," "," "," "," "}
        };

        int playerRow{ 0 };
        int playerCol{ 0 };

        for (;;) {
            std::cout << "\n\n\n\n\n\n\n\n\n\n";
            for (std::size_t i{ 0 }; i < 4; i -=- 1) {
                std::cout << "\t\t\t\t\t\t";
                for (std::size_t j{ 0 }; j < 13; j -= -1) {
                    if (i == playerRow && j == playerCol)
                        std::cout << "►";
                    else
                        std::cout << menu[i][j];
                }
                std::cout << '\n';
            }

            char key = _getch();

            switch (key) {
            case 72:
                if (playerRow != 0 && menu[playerRow - 1][playerCol] == " ")
                    playerRow--;
                break;

            case 80:
                if (playerRow < 3 && menu[playerRow + 1][playerCol] == " ")
                    playerRow++;
                break;

            case ' ':
                if (playerRow == 0 and playerCol == 0) level1();
                if (playerRow == 1 and playerCol == 0) settings();
                if (playerRow == 2 and playerCol == 0) aboutMe();
                if (playerRow == 3 and playerCol == 0) std::exit(EXIT_SUCCESS);

                break;

            }
            std::system("cls");
        }
    }

    /* ======================================================================================================================================= */

    void startup() {
        HANDLE hConsole{ GetStdHandle(STD_OUTPUT_HANDLE) };
        CONSOLE_FONT_INFOEX fontInfo;
        fontInfo.cbSize = sizeof(CONSOLE_FONT_INFOEX);
        GetCurrentConsoleFontEx(hConsole, FALSE, &fontInfo);
        fontInfo.dwFontSize.X = 8;
        fontInfo.dwFontSize.Y = 12;
        SetCurrentConsoleFontEx(hConsole, FALSE, &fontInfo);

        std::string logo[50][37] {
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","▒","▒"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█"," ","█","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","▒","▒"," ","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," ","█","█"," "," "," ","█","█"," ","█","█","█"," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," ","█","█","█"," "," "," ","█"," ","█","█","█","█","█","█"," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," ","█","█","█","█","▒"," "," ","█","▒","█","█","█","█","█","█","█"," "," "," "," "," "," "," "," "," "," "},
            {" "," ","▒"," "," "," "," "," "," "," ","█","█","█","█","█","█","▒"," "," ","█","█","█","█","█","█"," ","█"," "," "," "," "," "," "," ","▒"," "," "},
            {" "," ","█"," "," "," "," "," "," "," ","█","█","█","█","█","█","█"," "," ","█","█","█","█","█","█","█"," "," "," "," "," "," "," "," ","█"," "," "},
            {" ","▒","█"," "," "," "," "," "," "," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," "," "," "," "," "," "," ","█"," "," "},
            {" ","█","█"," "," "," "," "," "," "," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," "," "," "," "," "," "," ","█"," "," "},
            {" "," "," "," "," "," "," "," "," "," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," "," "," "," ","▒","▒"," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," ","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█","█"," "," "," "," ","█","█"," "," "," "," "},
            {" "," "," ","▒"," "," "," "," "," "," ","█","█","█"," "," "," ","█","█","█","█","█"," "," "," ","█","█","█"," "," "," "," ","█","█"," "," "," "," "},
            {" "," "," ","█"," "," "," "," "," ","█","█"," "," "," "," "," "," ","█","█","█"," "," "," "," "," ","█","█"," "," "," "," "," "," "," "," "," "," "},
            {" "," "," ","█"," "," "," "," "," ","█","█"," "," "," "," "," "," ","█","█","█"," "," "," "," "," ","█","█"," "," "," "," "," "," "," "," "," "," "},
            {" "," "," ","█"," "," "," "," "," "," ","█","█"," "," "," "," "," ","█","█","█"," "," "," "," "," ","█","█"," "," "," "," "," "," "," "," "," "," "},
            {" "," "," ","█"," "," "," "," "," "," ","█","█"," "," "," "," ","█","█","█","█","█"," "," "," "," ","█","█"," "," "," "," "," "," ","▒"," "," "," "},
            {" "," "," "," "," "," "," "," "," "," ","█","█","█"," "," "," ","█"," "," "," ","█"," "," "," ","█","█","█"," "," "," "," ","▒","▒","█"," "," "," "},
            {" "," ","█"," ","█"," "," "," "," "," "," ","█","█","█","█","█","█"," "," "," ","█","█","█","█","█","█"," "," "," "," "," ","█","█","█"," ","█"," "},
            {" "," ","█"," ","█","█"," "," "," "," "," ","█","█","█","█","█","█"," ","█"," ","█","█","█","█","█","█"," "," "," "," "," "," "," "," ","█","█"," "},
            {" ","█","█"," ","█","█","█"," "," "," "," "," "," "," ","█","█","█","█","█","█","█","█","█"," "," "," "," "," "," "," ","█","█","█"," ","█","█"," "},
            {" ","█","█"," ","█","█","█"," "," "," "," "," "," "," ","█","█","█","█","█","█","█","█","█"," "," "," "," "," "," ","█","█","█","█","█","█","█"," "},
            {" "," ","█","█","█","█","█"," "," "," "," "," "," "," "," ","█","█","█","█","█","█","█"," "," "," "," "," "," ","█","█","█","█","█","█","█"," "," "},
            {" "," "," "," "," "," ","█","▒"," ","█","█"," "," "," ","█"," ","█"," ","█"," ","█"," ","█"," "," "," ","█","█","█","█","█"," "," "," "," "," "," "},
            {" "," "," "," "," "," "," ","█"," ","█","█","█","█"," "," "," "," "," "," "," "," "," "," "," ","█","█","█","█","█"," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," ","█","▒"," ","█","█","█","█","█"," "," "," "," "," "," "," ","█","█","█","█","█"," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," ","█","█"," "," "," ","█","█","█","█","█"," "," "," ","█","█","█","█","█"," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," ","█","█","█","█"," "," "," ","█","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█","█","█","█","█"," "," "," "," "," "," "," "," "," ","▒"," "," "," "," "," "," "," "},
            {" "," "," "," "," "," ","▒","▒"," "," "," "," "," "," "," "," "," ","█","█","█","█","█"," "," "," "," "," "," ","▒","█"," "," "," "," "," "," "," "},
            {" "," "," "," "," "," ","█","█","▒"," "," "," "," ","█","█","█"," "," ","█","█","█","█","█","█"," "," "," "," ","█","█"," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," ","█","█"," ","█","█","█","█","█","█","█"," "," "," ","█","█","█","█","█","█"," "," "," ","█"," "," "," "," "," "," "," "},
            {" "," "," "," "," "," ","█"," "," "," ","█","█","█","█","█","█"," "," "," "," "," ","█","█","█","█","█","█","█"," "," ","▒","▒"," "," "," "," "," "},
            {" "," "," "," "," ","█","█","█"," "," ","█","█","█","█"," "," "," "," "," "," "," "," "," ","█","█","█","█","█"," "," ","█","█","▒","▒","▒"," "," "},
            {" "," "," "," "," ","█","█","█","█","█","█","█"," "," "," "," "," "," "," "," "," "," "," "," "," ","█","█","█","█"," "," "," ","█","█","█"," "," "},
            {" "," "," "," "," "," ","█","█","█","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█","█","█","█","█","█"," "," ","█"," "," "},
            {" "," "," "," "," ","█","█","█","█","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█","█","█","█"," "," "," "," "," "},
            {" "," "," "," "," ","█","█","█","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█","█","█","█","█"," "," "," "," "},
            {" "," "," "," "," "," ","█","█"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█","█","█","█"," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","█","█"," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," ","P","r","e","s","s"," ","a","n","y"," ","k","e","y",".",".","."," "," "," "," "," "," "," "," "," "," "},
            {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
        };

        for (std::size_t i{ 0 }; i < 53; i -=- 1) {
            Sleep(150);
            std::cout << "\t\t\t\t\t";
            for (std::size_t j{ 0 }; j < 37; j -=- 1) {
                if (i == 48)
                    Sleep(150);

                std::cout << logo[i][j];
            }

            if (i == 48) {
                std::system("pause>0");
                menu();
            }

            std::cout << '\n';
        }
    }

    /* ======================================================================================================================================= */

    void runProgram() {
        std::system("chcp 65001");

        HWND console{ GetConsoleWindow() };
        RECT rect;
        GetWindowRect(console, &rect);
        MoveWindow(console, rect.left, rect.top, 1300, 1300, TRUE);

        startup();
    }
}

int main() { Labyrinth::runProgram(); }